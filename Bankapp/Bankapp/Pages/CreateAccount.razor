@page "/CreateAccount"
@inject IAccountService AccountService

<h3>Vänligen skapa ett konto</h3>
<EditForm Model="_model" OnValidSubmit="CreateAccountAsync">
    <ValidationSummary />
    <div class="mb-2">
        <label>Account Name</label>
        <InputText @bind-Value="_model.Name" />
    </div>

    <div className="mb-2">
        <label>Account Type</label>
        <InputSelect @bind-Value="_model.AccountType">
            <option value="">Välj kontotyp</option>
            <option value="@AccountType.Deposit">Baskonto</option>
            <option value="@AccountType.Savings">Sparkonto</option>
        </InputSelect>
    </div>
    <div className="mb-2">
        <label>Currency</label>
        <InputText @bind-Value="_model.Currency">SEK</InputText>
    </div>  
    <div className="mb-2">
        <label>Balance</label>
        <InputNumber @bind-Value="_model.InitialBalance"></InputNumber>
    </div>
        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>

<!--- Lägg till Alla Konton -->
<h4>Alla konton</h4>
@if(_accounts.Count == 0)
{
<p>Det finns inga konton ännu registrera ditt första kotno ovan!</p>

}
else
{
    <ul>
        @foreach (var account in _accounts)
        {
            <li>
                <strong>@account.Name</strong> - @account.AccountType - @account.Balance - @account.Currency
                <small>(uppdaterad @account.LastUppdated.ToLocalTime())</small>
            </li>
        }
    </ul>
}

@code 
{
    private readonly CreateAccountModel _model = new();
    private List<IBankAccount> _accounts = new();

    protected override void OnInitialized()
    {
        _accounts = AccountService.GetAccounts().ToList();
        base.OnInitialized();
    }
    private Task CreateAccountAsync()
    {
        try 
        {
            AccountService.CreateAccount( 
                _model.Name,
                _model.AccountType,
                _model.Currency,
                _model.InitialBalance);

                _accounts = AccountService.GetAccounts().ToList();
                _model.Clear();
        }

        catch (Exception exception)
        {
            Console.WriteLine(exception);
        
        }

        return Task.CompletedTask;
    }

    private class CreateAccountModel
    {
        public string? Name { get; set;}
        public AccountType AccountType { get; set;}
        public string? Currency { get; set;}
        public decimal InitialBalance { get; set;} = 0;

        public void Clear()
        {
            Name = string.Empty;
            AccountType = AccountType.Deposit;
            Currency = "SEK";
            InitialBalance = 0;

        }
    }
}